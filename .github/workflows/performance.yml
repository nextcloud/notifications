name: Performance

on:
  pull_request:
    paths:
      - '.github/workflows/**'
      - 'appinfo/**'
      - 'lib/**'
      - 'templates/**'
      - 'tests/**'
      - 'vendor/**'
      - 'vendor-bin/**'
      - '.php-cs-fixer.dist.php'
      - 'composer.json'
      - 'composer.lock'

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: performance-sqlite-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  performance-sqlite:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-versions: ['8.1']
        server-versions: ['master']

    steps:
      - name: Set app env
        run: |
          # Split and keep last
          echo "APP_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Checkout server
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3
        with:
          submodules: true
          repository: nextcloud/server
          ref: ${{ matrix.server-versions }}

      - name: Checkout app
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3
        with:
          path: apps/${{ env.APP_NAME }}

      - name: Set up php ${{ matrix.php-versions }}
        uses: shivammathur/setup-php@1a18b2267f80291a81ca1d33e7c851fe09e7dfc4 # v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, iconv, fileinfo, intl, sqlite, pdo_sqlite
          coverage: none
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check composer file existence
        id: check_composer
        uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b # v2
        with:
          files: apps/${{ env.APP_NAME }}/composer.json

      - name: Set up dependencies
        # Only run if phpunit config file exists
        if: steps.check_composer.outputs.files_exists == 'true'
        working-directory: apps/${{ env.APP_NAME }}
        run: composer i

      - name: Set up Nextcloud
        env:
          DB_PORT: 4444
        run: |
          mkdir data
          ./occ maintenance:install --verbose --database=sqlite --database-name=nextcloud --database-host=127.0.0.1 --database-port=$DB_PORT --database-user=root --database-pass=rootpassword --admin-user admin --admin-pass admin
          ./occ app:enable --force ${{ env.APP_NAME }}
          ./occ config:system:set query_log_file --value "$PWD/query.log"

#      - name: Check PHPUnit script is defined
#        id: check_phpunit
#        continue-on-error: true
#        working-directory: apps/${{ env.APP_NAME }}
#        run: |
#          composer run --list | grep "^  test:unit " | wc -l | grep 1
#
#      - name: PHPUnit
#        # Only run if phpunit config file exists
#        if: steps.check_phpunit.outcome == 'success'
#        working-directory: apps/${{ env.APP_NAME }}
#        run: composer run test:unit

      - name: Check PHPUnit integration script is defined
        id: check_integration
        continue-on-error: true
        working-directory: apps/${{ env.APP_NAME }}
        run: |
          composer run --list | grep "^  test:integration " | wc -l | grep 1

      - name: Run Nextcloud
        # Only run if phpunit integration config file exists
        if: steps.check_integration.outcome == 'success'
        run: php -S localhost:8080 &

      - name: PHPUnit integration
        # Only run if phpunit integration config file exists
        if: steps.check_integration.outcome == 'success'
        working-directory: apps/${{ env.APP_NAME }}
        run: composer run test:integration

      - name: Print query.log
        run: cat query.log

      - name: Query count
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let myOutput = ''
            let myError = ''

            const options = {}
            options.listeners = {
              stdout: (data) => {
                myOutput += data.toString()
              },
              stderr: (data) => {
                myError += data.toString()
              }
            }
            await exec.exec(`/bin/bash -c "cat query.log | wc -l"`, [], options)
            msg = myOutput
            const queryCount = parseInt(myOutput, 10)

            myOutput = ''
            await exec.exec('cat', ['apps/notifications/tests/Integration/base-query-count.txt'], options)
            const baseCount = parseInt(myOutput, 10)

            const absoluteIncrease = queryCount - baseCount
            const relativeIncrease = baseCount <= 0 ? 100 : (parseInt((absoluteIncrease / baseCount * 10000), 10) / 100)

            if (absoluteIncrease >= 100 || relativeIncrease > 5) {
              const comment = `üê¢ Performance warning.\nIt looks like the query count of the integration tests increased with this PR.\nDatabase query count is now ` + queryCount + ' was ' + baseCount + ' (+' + relativeIncrease + '%)\nPlease check your code again. If you added a new test this can be expected and the base value in tests/Integration/base-query-count.txt can be increased.'
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              })
            }
            if (queryCount < 100) {
              const comment = `üêà Performance measuring seems broken. Failed to get query count.`
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              })
            }
